import time
import hmac
import hashlib
import base64
import requests
import json
import os
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime

# 🔑 Bitget API 키 정보
API_KEY = ''
SECRET_KEY = ''
PASSPHRASE = ''

# 🟢 계정 유형 설정: 'futures' 또는 'spot'
ACCOUNT_TYPE = 'futures'  # 또는 'spot'

# 📂 데이터 저장 파일 경로
HISTORY_FILE = 'bots_balance_history.json'

# Bitget API 엔드포인트
BASE_URL = 'https://api.bitget.com'
REQUEST_PATH = '/api/v2/account/bot-assets'

# ✅ API 요청 함수: 봇 계정의 자산 정보 가져오기
def get_bots_balance():
    timestamp = str(int(time.time() * 1000))
    method = 'GET'
    request_path = f'{REQUEST_PATH}?accountType={ACCOUNT_TYPE}'
    url = f'{BASE_URL}{request_path}'

    # 🛠️ 서명(Signature) 생성
    prehash = timestamp + method + request_path
    hmac_key = hmac.new(SECRET_KEY.encode('utf-8'), prehash.encode('utf-8'), hashlib.sha256)
    signature = base64.b64encode(hmac_key.digest()).decode()

    # ✅ API 요청 헤더 설정
    headers = {
        'ACCESS-KEY': API_KEY,
        'ACCESS-SIGN': signature,
        'ACCESS-PASSPHRASE': PASSPHRASE,
        'ACCESS-TIMESTAMP': timestamp,
        'Content-Type': 'application/json'
    }

    try:
        response = requests.get(url, headers=headers)
        data = response.json()

        if response.status_code == 200 and data['code'] == '00000':
            if "data" in data and len(data["data"]) > 0:
                return {
                    'timestamp': timestamp,
                    'equity': float(data["data"][0]["equity"])  # ✅ 총 자산 (equity) 값 가져오기
                }
        else:
            print(f"⚠️ API 오류: {data.get('msg', '알 수 없는 오류')}")
            return None
    except Exception as e:
        print(f"❌ 요청 실패: {e}")
        return None

# ✅ 자산 추이를 JSON 파일에 저장하는 함수
def save_balance_history(new_data):
    if not new_data:
        return

    # 기존 데이터 불러오기 (없으면 빈 리스트)
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, 'r', encoding='utf-8') as file:
            try:
                history = json.load(file)
            except json.JSONDecodeError:
                history = []
    else:
        history = []

    # 새 데이터 추가
    history.append(new_data)

    # JSON 파일 저장
    with open(HISTORY_FILE, 'w', encoding='utf-8') as file:
        json.dump(history, file, ensure_ascii=False, indent=4)

    print(f"✅ 자산 기록 저장됨: {new_data}")

# ✅ 실시간 그래프 그리기 (기존 창을 재사용)
def plot_balance_history():
    if not os.path.exists(HISTORY_FILE):
        print("⚠️ 기록된 데이터가 없습니다.")
        return

    with open(HISTORY_FILE, 'r', encoding='utf-8') as file:
        history = json.load(file)

    if len(history) < 2:
        print("⚠️ 그래프를 그릴 충분한 데이터가 없습니다.")
        return

    timestamps = [datetime.fromtimestamp(int(item['timestamp']) / 1000) for item in history]
    equities = [item['equity'] for item in history]

    plt.clf()  # ✅ 기존 그래프 초기화 (새로운 창 생성 방지)
    plt.plot(timestamps, equities, marker='o', linestyle='-', color='b', label='총 자산 (Equity)')

    plt.xlabel('시간')
    plt.ylabel('총 자산 (USDT)')
    plt.title('Bots 계정 총 자산 추이')
    plt.legend()
    plt.grid(True)

    # 날짜 포맷 설정
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%H:%M:%S'))
    plt.gcf().autofmt_xdate()

    plt.pause(1)  # ✅ 그래프 업데이트 후 멈추지 않도록 함

# ✅ 1분마다 데이터 갱신
def track_balance():
    plt.ion()  # ✅ Matplotlib 인터랙티브 모드 활성화 (창 하나만 유지)
    print("\n📊 Bots 계정 자산 추적 시작... (1분마다 갱신)\n")
    while True:
        balance_data = get_bots_balance()
        if balance_data:
            save_balance_history(balance_data)
            plot_balance_history()  # ✅ 데이터를 저장할 때마다 그래프도 업데이트
        time.sleep(5)  # 1분 대기 후 다시 실행

# 프로그램 실행
if __name__ == "__main__":
    track_balance()
